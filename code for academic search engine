#include <algorithm>
#include <iostream>
#include <map>
#include <string>
#include <vector>

using namespace std;

struct AcademicResource {
  string title;
  vector<string> authors;
  vector<string> keywords;
  string type;
  string publication;
  int year;
};

struct User {
  string username;
  string password;
};

map<string, User> userDatabase;

vector<AcademicResource> resources = {
    {"Advances in Quantum Computing: Algorithms and Implementations",
     {"Dr. Emily Carter", "Dr. Michael Zhang"},
     {"Quantum Computing", "Algorithms", "Implementations"},
     "Paper",
     "Quantum Information Processing",
     2022},
    {"Environmental Impact of Renewable Energy Technologies: A Global "
     "Perspective",
     {"Dr. Maria Lopez", "Dr. James Miller"},
     {"Renewable Energy", "Environmental Impact", "Global Perspective"},
     "Paper",
 "Renewable and Sustainable Energy Reviews",
     2023},
    {"Neuroscience of Decision-Making: Insights from Functional MRI Studies",
     {"Prof. David Brown", "Dr. Sarah White"},
     {"Neuroscience", "Decision-Making", "Functional MRI"},
     "Paper",
     "Frontiers in Human Neuroscience",
     2021},
    {"Artificial Intelligence: A Modern Approach",
     {"Stuart Russell", "Peter Norvig"},
     {"Artificial Intelligence", "Machine Learning", "AI Applications"},
     "Book",
     "Pearson Education",
     2020},
    {"Conference Proceedings on Machine Learning Techniques",
     {"Prof. John Smith", "Dr. Emma Taylor"},
     {"Machine Learning", "Data Science", "Conference Proceedings"},
     "Conference Proceeding",
     "International Conference on Machine Learning",
     2019},
    {"Statistical Methods in Epidemiology",
     {"Prof. William Martin", "Dr. Olivia Green"},
     {"Epidemiology", "Statistics", "Research Methods"},
     "Book",
     "Springer",
     2018}};

vector<AcademicResource>
searchByTitle(const vector<AcademicResource> &resources, const string &query) {
  vector<AcademicResource> results;
  for (const auto &resource : resources) {
    if (resource.title.find(query) != string::npos) {
      results.push_back(resource);
    }
  }
return results;
}

vector<AcademicResource>
searchByAuthors(const vector<AcademicResource> &resources,
                const string &query) {
  vector<AcademicResource> results;
  for (const auto &resource : resources) {
    for (const auto &author : resource.authors) {
      if (author.find(query) != string::npos) {
        results.push_back(resource);
        break;
      }
    }
  }
  return results;
}

vector<AcademicResource>
searchByKeywords(const vector<AcademicResource> &resources,
                 const string &query) {
  vector<AcademicResource> results;
  for (const auto &resource : resources) {
    for (const auto &keyword : resource.keywords) {
      if (keyword.find(query) != string::npos) {
        results.push_back(resource);
        break;
      }
    }
  }
  return results;
}

void displayResource(const AcademicResource &resource) {
  cout << "Title: " << resource.title << endl;
 cout << "Authors: ";
  for (size_t i = 0; i < resource.authors.size(); ++i) {
    cout << resource.authors[i];
    if (i < resource.authors.size() - 1) {
      cout << ", ";
    }
  }
  cout << endl;
  cout << "Type: " << resource.type << endl;
  cout << "Publication: " << resource.publication << endl;
  cout << "Year: " << resource.year << endl;
  cout << endl;
}

void displaySearchResults(const vector<AcademicResource> &results) {
  if (results.empty()) {
    cout << "No results found." << endl;
  } else {
    cout << "Search results:" << endl;
    for (const auto &resource : results) {
      displayResource(resource);
    }
  }
}

void registerUser() {
  User newUser;
  cout << "Enter a username: ";
  cin >> newUser.username;
  cout << "Enter a password: ";
  cin >> newUser.password;

  if (userDatabase.find(newUser.username) == userDatabase.end()) {
    userDatabase[newUser.username] = newUser;
    cout << "Registration successful!" << endl;
} else {
    cout << "Username already exists. Registration failed." << endl;
  }
}

bool loginUser(const string &username, const string &password) {
  auto it = userDatabase.find(username);
  if (it != userDatabase.end() && it->second.password == password) {
    cout << "Login successful!" << endl;
    return true;
  } else {
    cout << "Login failed. Incorrect username or password." << endl;
    return false;
  }
}

int main() {
  int choice;
  string query;
  string username, password;
  bool loggedIn = false;

  do {
    cout << "Academic Search Engine Menu:" << endl;
    cout << "1. Register" << endl;
    cout << "2. Login" << endl;
    cout << "3. Search by title" << endl;
    cout << "4. Search by authors" << endl;
    cout << "5. Search by keywords/topics" << endl;
    cout << "6. Logout" << endl;
    cout << "7. Exit" << endl;
    cout << "Enter your choice: ";
    cin >> choice;

 switch (choice) {
    case 1:
      registerUser();
      break;
    case 2:
      cout << "Enter username: ";
      cin >> username;
      cout << "Enter password: ";
      cin >> password;
      loggedIn = loginUser(username, password);
      break;
    case 3:
      if (loggedIn) {
        cout << "Enter title query: ";
        cin.ignore();
        getline(cin, query);
        displaySearchResults(searchByTitle(resources, query));
      } else {
        cout << "Please login first." << endl;
      }
      break;
    case 4:
      if (loggedIn) {
        cout << "Enter authors query: ";
        cin.ignore();
        getline(cin, query);
        displaySearchResults(searchByAuthors(resources, query));
      } else {
        cout << "Please login first." << endl;
      }
      break;
    case 5:
      if (loggedIn) {
        cout << "Enter keywords/topics query: ";
        cin.ignore();
        getline(cin, query);
  displaySearchResults(searchByKeywords(resources, query));
      } else {
        cout << "Please login first." << endl;
      }
      break;
    case 6:
      loggedIn = false;
      cout << "Logged out." << endl;
      break;
    case 7:
      cout << "Exiting..." << endl;
      break;
    default:
      cout << "Invalid choice. Please enter again." << endl;
      break;
    }

  } while (choice != 7);

  return 0;
}
